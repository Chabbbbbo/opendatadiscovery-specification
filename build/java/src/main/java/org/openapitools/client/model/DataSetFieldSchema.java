/*
 * OpenDataDiscovery API Contract
 * OpenDataDiscovery API Contract
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.DataSetField;
import org.openapitools.client.model.DataSetFieldType;

/**
 * DataSetFieldSchema
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2020-12-30T13:37:39.645993+03:00[Europe/Moscow]")
public class DataSetFieldSchema {
  /**
   * Gets or Sets type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    STRING("TYPE_STRING"),
    
    NUMBER("TYPE_NUMBER"),
    
    INTEGER("TYPE_INTEGER"),
    
    BOOLEAN("TYPE_BOOLEAN"),
    
    DATETIME("TYPE_DATETIME"),
    
    STRUCT("TYPE_STRUCT"),
    
    BINARY("TYPE_BINARY"),
    
    LIST("TYPE_LIST"),
    
    MAP("TYPE_MAP");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_LOGICAL_TYPE = "logicalType";
  @SerializedName(SERIALIZED_NAME_LOGICAL_TYPE)
  private String logicalType;

  public static final String SERIALIZED_NAME_IS_NULLABLE = "isNullable";
  @SerializedName(SERIALIZED_NAME_IS_NULLABLE)
  private Boolean isNullable;

  public static final String SERIALIZED_NAME_KEY = "key";
  @SerializedName(SERIALIZED_NAME_KEY)
  private DataSetFieldType key;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private DataSetFieldType value;

  public static final String SERIALIZED_NAME_FIELD_LIST = "fieldList";
  @SerializedName(SERIALIZED_NAME_FIELD_LIST)
  private List<DataSetField> fieldList = null;


  public DataSetFieldSchema type(TypeEnum type) {
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @ApiModelProperty(required = true, value = "")

  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    this.type = type;
  }


  public DataSetFieldSchema logicalType(String logicalType) {
    
    this.logicalType = logicalType;
    return this;
  }

   /**
   * Get logicalType
   * @return logicalType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getLogicalType() {
    return logicalType;
  }


  public void setLogicalType(String logicalType) {
    this.logicalType = logicalType;
  }


  public DataSetFieldSchema isNullable(Boolean isNullable) {
    
    this.isNullable = isNullable;
    return this;
  }

   /**
   * Get isNullable
   * @return isNullable
  **/
  @ApiModelProperty(required = true, value = "")

  public Boolean getIsNullable() {
    return isNullable;
  }


  public void setIsNullable(Boolean isNullable) {
    this.isNullable = isNullable;
  }


  public DataSetFieldSchema key(DataSetFieldType key) {
    
    this.key = key;
    return this;
  }

   /**
   * Get key
   * @return key
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public DataSetFieldType getKey() {
    return key;
  }


  public void setKey(DataSetFieldType key) {
    this.key = key;
  }


  public DataSetFieldSchema value(DataSetFieldType value) {
    
    this.value = value;
    return this;
  }

   /**
   * Get value
   * @return value
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public DataSetFieldType getValue() {
    return value;
  }


  public void setValue(DataSetFieldType value) {
    this.value = value;
  }


  public DataSetFieldSchema fieldList(List<DataSetField> fieldList) {
    
    this.fieldList = fieldList;
    return this;
  }

  public DataSetFieldSchema addFieldListItem(DataSetField fieldListItem) {
    if (this.fieldList == null) {
      this.fieldList = new ArrayList<DataSetField>();
    }
    this.fieldList.add(fieldListItem);
    return this;
  }

   /**
   * Get fieldList
   * @return fieldList
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<DataSetField> getFieldList() {
    return fieldList;
  }


  public void setFieldList(List<DataSetField> fieldList) {
    this.fieldList = fieldList;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataSetFieldSchema dataSetFieldSchema = (DataSetFieldSchema) o;
    return Objects.equals(this.type, dataSetFieldSchema.type) &&
        Objects.equals(this.logicalType, dataSetFieldSchema.logicalType) &&
        Objects.equals(this.isNullable, dataSetFieldSchema.isNullable) &&
        Objects.equals(this.key, dataSetFieldSchema.key) &&
        Objects.equals(this.value, dataSetFieldSchema.value) &&
        Objects.equals(this.fieldList, dataSetFieldSchema.fieldList);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, logicalType, isNullable, key, value, fieldList);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataSetFieldSchema {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    logicalType: ").append(toIndentedString(logicalType)).append("\n");
    sb.append("    isNullable: ").append(toIndentedString(isNullable)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    fieldList: ").append(toIndentedString(fieldList)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

