/*
 * OpenDataDiscovery API Contract
 * OpenDataDiscovery API Contract
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.DataConsumer;
import org.openapitools.client.model.DataInput;
import org.openapitools.client.model.DataQualityTest;
import org.openapitools.client.model.DataQualityTestRun;
import org.openapitools.client.model.DataSet;
import org.openapitools.client.model.DataTransformer;
import org.openapitools.client.model.DataTransformerRun;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for OpenDataDiscoveryApi
 */
@Ignore
public class OpenDataDiscoveryApiTest {

    private final OpenDataDiscoveryApi api = new OpenDataDiscoveryApi();

    
    /**
     * 
     *
     * Provides list of available consumers
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDataConsumerListTest() throws ApiException {
        String datasourceOddrn = null;
        List<DataConsumer> dataConsumer = null;
        api.getDataConsumerList(datasourceOddrn, dataConsumer);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Provides list of available inputs
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDataInputListTest() throws ApiException {
        String datasourceOddrn = null;
        List<DataInput> dataInput = null;
        api.getDataInputList(datasourceOddrn, dataInput);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Provides list of available data quality tests
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDataQualityTestListTest() throws ApiException {
        String datasourceOddrn = null;
        List<DataQualityTest> dataQualityTest = null;
        api.getDataQualityTestList(datasourceOddrn, dataQualityTest);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Provides list of available data quality tests runs
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDataQualityTestRunListTest() throws ApiException {
        String datasourceOddrn = null;
        List<DataQualityTestRun> dataQualityTestRun = null;
        api.getDataQualityTestRunList(datasourceOddrn, dataQualityTestRun);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Provides list of available datasets
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDataSetListTest() throws ApiException {
        String datasourceOddrn = null;
        List<DataSet> dataSet = null;
        api.getDataSetList(datasourceOddrn, dataSet);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Provides list of available transformers
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDataTransformerListTest() throws ApiException {
        String datasourceOddrn = null;
        List<DataTransformer> dataTransformer = null;
        api.getDataTransformerList(datasourceOddrn, dataTransformer);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Provides list of runs for all transformers
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDataTransformerRunListTest() throws ApiException {
        String datasourceOddrn = null;
        List<DataTransformerRun> dataTransformerRun = null;
        api.getDataTransformerRunList(datasourceOddrn, dataTransformerRun);

        // TODO: test validations
    }
    
}
