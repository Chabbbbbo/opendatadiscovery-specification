/*
 * OpenDataDiscovery API Contract
 * OpenDataDiscovery API Contract
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.BaseObject;
import org.openapitools.client.model.DataTransformerAllOf;

/**
 * DataTransformer
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2020-12-30T13:37:39.645993+03:00[Europe/Moscow]")
public class DataTransformer {
  public static final String SERIALIZED_NAME_ODDRN = "oddrn";
  @SerializedName(SERIALIZED_NAME_ODDRN)
  private String oddrn;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OWNER = "owner";
  @SerializedName(SERIALIZED_NAME_OWNER)
  private String owner;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private Map<String, String> metadata = null;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_SOURCE_CODE_URL = "sourceCodeUrl";
  @SerializedName(SERIALIZED_NAME_SOURCE_CODE_URL)
  private String sourceCodeUrl;

  public static final String SERIALIZED_NAME_SQL = "sql";
  @SerializedName(SERIALIZED_NAME_SQL)
  private String sql;

  public static final String SERIALIZED_NAME_INPUTS = "inputs";
  @SerializedName(SERIALIZED_NAME_INPUTS)
  private List<String> inputs = new ArrayList<String>();

  public static final String SERIALIZED_NAME_OUTPUTS = "outputs";
  @SerializedName(SERIALIZED_NAME_OUTPUTS)
  private List<String> outputs = new ArrayList<String>();

  /**
   * Gets or Sets subtype
   */
  @JsonAdapter(SubtypeEnum.Adapter.class)
  public enum SubtypeEnum {
    JOB("DATATRANSFORMER_JOB"),
    
    EXPERIMENT("DATATRANSFORMER_EXPERIMENT"),
    
    ML_MODEL_TRAINING("DATATRANSFORMER_ML_MODEL_TRAINING");

    private String value;

    SubtypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SubtypeEnum fromValue(String value) {
      for (SubtypeEnum b : SubtypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SubtypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SubtypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SubtypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SubtypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SUBTYPE = "subtype";
  @SerializedName(SERIALIZED_NAME_SUBTYPE)
  private SubtypeEnum subtype;


  public DataTransformer oddrn(String oddrn) {
    
    this.oddrn = oddrn;
    return this;
  }

   /**
   * Get oddrn
   * @return oddrn
  **/
  @ApiModelProperty(example = "//aws/glue/{account_id}/{database}/{tablename}", required = true, value = "")

  public String getOddrn() {
    return oddrn;
  }


  public void setOddrn(String oddrn) {
    this.oddrn = oddrn;
  }


  public DataTransformer name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @ApiModelProperty(required = true, value = "")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public DataTransformer owner(String owner) {
    
    this.owner = owner;
    return this;
  }

   /**
   * Get owner
   * @return owner
  **/
  @ApiModelProperty(example = "//aws/iam/{account_id}/user/name", required = true, value = "")

  public String getOwner() {
    return owner;
  }


  public void setOwner(String owner) {
    this.owner = owner;
  }


  public DataTransformer metadata(Map<String, String> metadata) {
    
    this.metadata = metadata;
    return this;
  }

  public DataTransformer putMetadataItem(String key, String metadataItem) {
    if (this.metadata == null) {
      this.metadata = new HashMap<String, String>();
    }
    this.metadata.put(key, metadataItem);
    return this;
  }

   /**
   * Get metadata
   * @return metadata
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Map<String, String> getMetadata() {
    return metadata;
  }


  public void setMetadata(Map<String, String> metadata) {
    this.metadata = metadata;
  }


  public DataTransformer description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @ApiModelProperty(required = true, value = "")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public DataTransformer sourceCodeUrl(String sourceCodeUrl) {
    
    this.sourceCodeUrl = sourceCodeUrl;
    return this;
  }

   /**
   * Get sourceCodeUrl
   * @return sourceCodeUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSourceCodeUrl() {
    return sourceCodeUrl;
  }


  public void setSourceCodeUrl(String sourceCodeUrl) {
    this.sourceCodeUrl = sourceCodeUrl;
  }


  public DataTransformer sql(String sql) {
    
    this.sql = sql;
    return this;
  }

   /**
   * Get sql
   * @return sql
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSql() {
    return sql;
  }


  public void setSql(String sql) {
    this.sql = sql;
  }


  public DataTransformer inputs(List<String> inputs) {
    
    this.inputs = inputs;
    return this;
  }

  public DataTransformer addInputsItem(String inputsItem) {
    this.inputs.add(inputsItem);
    return this;
  }

   /**
   * Get inputs
   * @return inputs
  **/
  @ApiModelProperty(required = true, value = "")

  public List<String> getInputs() {
    return inputs;
  }


  public void setInputs(List<String> inputs) {
    this.inputs = inputs;
  }


  public DataTransformer outputs(List<String> outputs) {
    
    this.outputs = outputs;
    return this;
  }

  public DataTransformer addOutputsItem(String outputsItem) {
    this.outputs.add(outputsItem);
    return this;
  }

   /**
   * Get outputs
   * @return outputs
  **/
  @ApiModelProperty(required = true, value = "")

  public List<String> getOutputs() {
    return outputs;
  }


  public void setOutputs(List<String> outputs) {
    this.outputs = outputs;
  }


  public DataTransformer subtype(SubtypeEnum subtype) {
    
    this.subtype = subtype;
    return this;
  }

   /**
   * Get subtype
   * @return subtype
  **/
  @ApiModelProperty(required = true, value = "")

  public SubtypeEnum getSubtype() {
    return subtype;
  }


  public void setSubtype(SubtypeEnum subtype) {
    this.subtype = subtype;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataTransformer dataTransformer = (DataTransformer) o;
    return Objects.equals(this.oddrn, dataTransformer.oddrn) &&
        Objects.equals(this.name, dataTransformer.name) &&
        Objects.equals(this.owner, dataTransformer.owner) &&
        Objects.equals(this.metadata, dataTransformer.metadata) &&
        Objects.equals(this.description, dataTransformer.description) &&
        Objects.equals(this.sourceCodeUrl, dataTransformer.sourceCodeUrl) &&
        Objects.equals(this.sql, dataTransformer.sql) &&
        Objects.equals(this.inputs, dataTransformer.inputs) &&
        Objects.equals(this.outputs, dataTransformer.outputs) &&
        Objects.equals(this.subtype, dataTransformer.subtype);
  }

  @Override
  public int hashCode() {
    return Objects.hash(oddrn, name, owner, metadata, description, sourceCodeUrl, sql, inputs, outputs, subtype);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataTransformer {\n");
    sb.append("    oddrn: ").append(toIndentedString(oddrn)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    owner: ").append(toIndentedString(owner)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    sourceCodeUrl: ").append(toIndentedString(sourceCodeUrl)).append("\n");
    sb.append("    sql: ").append(toIndentedString(sql)).append("\n");
    sb.append("    inputs: ").append(toIndentedString(inputs)).append("\n");
    sb.append("    outputs: ").append(toIndentedString(outputs)).append("\n");
    sb.append("    subtype: ").append(toIndentedString(subtype)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

