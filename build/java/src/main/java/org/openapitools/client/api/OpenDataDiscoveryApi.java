/*
 * OpenDataDiscovery API Contract
 * OpenDataDiscovery API Contract
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DataConsumer;
import org.openapitools.client.model.DataInput;
import org.openapitools.client.model.DataQualityTest;
import org.openapitools.client.model.DataQualityTestRun;
import org.openapitools.client.model.DataSet;
import org.openapitools.client.model.DataTransformer;
import org.openapitools.client.model.DataTransformerRun;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OpenDataDiscoveryApi {
    private ApiClient localVarApiClient;

    public OpenDataDiscoveryApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OpenDataDiscoveryApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for getDataConsumerList
     * @param datasourceOddrn  (required)
     * @param dataConsumer  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDataConsumerListCall(String datasourceOddrn, List<DataConsumer> dataConsumer, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = dataConsumer;

        // create path and map variables
        String localVarPath = "/ingesion/{datasourceOddrn}/consumers"
            .replaceAll("\\{" + "datasourceOddrn" + "\\}", localVarApiClient.escapeString(datasourceOddrn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDataConsumerListValidateBeforeCall(String datasourceOddrn, List<DataConsumer> dataConsumer, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'datasourceOddrn' is set
        if (datasourceOddrn == null) {
            throw new ApiException("Missing the required parameter 'datasourceOddrn' when calling getDataConsumerList(Async)");
        }
        

        okhttp3.Call localVarCall = getDataConsumerListCall(datasourceOddrn, dataConsumer, _callback);
        return localVarCall;

    }

    /**
     * 
     * Provides list of available consumers
     * @param datasourceOddrn  (required)
     * @param dataConsumer  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void getDataConsumerList(String datasourceOddrn, List<DataConsumer> dataConsumer) throws ApiException {
        getDataConsumerListWithHttpInfo(datasourceOddrn, dataConsumer);
    }

    /**
     * 
     * Provides list of available consumers
     * @param datasourceOddrn  (required)
     * @param dataConsumer  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getDataConsumerListWithHttpInfo(String datasourceOddrn, List<DataConsumer> dataConsumer) throws ApiException {
        okhttp3.Call localVarCall = getDataConsumerListValidateBeforeCall(datasourceOddrn, dataConsumer, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Provides list of available consumers
     * @param datasourceOddrn  (required)
     * @param dataConsumer  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDataConsumerListAsync(String datasourceOddrn, List<DataConsumer> dataConsumer, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDataConsumerListValidateBeforeCall(datasourceOddrn, dataConsumer, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDataInputList
     * @param datasourceOddrn  (required)
     * @param dataInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDataInputListCall(String datasourceOddrn, List<DataInput> dataInput, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = dataInput;

        // create path and map variables
        String localVarPath = "/ingesion/{datasourceOddrn}/inputs"
            .replaceAll("\\{" + "datasourceOddrn" + "\\}", localVarApiClient.escapeString(datasourceOddrn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDataInputListValidateBeforeCall(String datasourceOddrn, List<DataInput> dataInput, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'datasourceOddrn' is set
        if (datasourceOddrn == null) {
            throw new ApiException("Missing the required parameter 'datasourceOddrn' when calling getDataInputList(Async)");
        }
        

        okhttp3.Call localVarCall = getDataInputListCall(datasourceOddrn, dataInput, _callback);
        return localVarCall;

    }

    /**
     * 
     * Provides list of available inputs
     * @param datasourceOddrn  (required)
     * @param dataInput  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void getDataInputList(String datasourceOddrn, List<DataInput> dataInput) throws ApiException {
        getDataInputListWithHttpInfo(datasourceOddrn, dataInput);
    }

    /**
     * 
     * Provides list of available inputs
     * @param datasourceOddrn  (required)
     * @param dataInput  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getDataInputListWithHttpInfo(String datasourceOddrn, List<DataInput> dataInput) throws ApiException {
        okhttp3.Call localVarCall = getDataInputListValidateBeforeCall(datasourceOddrn, dataInput, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Provides list of available inputs
     * @param datasourceOddrn  (required)
     * @param dataInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDataInputListAsync(String datasourceOddrn, List<DataInput> dataInput, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDataInputListValidateBeforeCall(datasourceOddrn, dataInput, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDataQualityTestList
     * @param datasourceOddrn  (required)
     * @param dataQualityTest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDataQualityTestListCall(String datasourceOddrn, List<DataQualityTest> dataQualityTest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = dataQualityTest;

        // create path and map variables
        String localVarPath = "/ingesion/{datasourceOddrn}/qualitytests"
            .replaceAll("\\{" + "datasourceOddrn" + "\\}", localVarApiClient.escapeString(datasourceOddrn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDataQualityTestListValidateBeforeCall(String datasourceOddrn, List<DataQualityTest> dataQualityTest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'datasourceOddrn' is set
        if (datasourceOddrn == null) {
            throw new ApiException("Missing the required parameter 'datasourceOddrn' when calling getDataQualityTestList(Async)");
        }
        

        okhttp3.Call localVarCall = getDataQualityTestListCall(datasourceOddrn, dataQualityTest, _callback);
        return localVarCall;

    }

    /**
     * 
     * Provides list of available data quality tests
     * @param datasourceOddrn  (required)
     * @param dataQualityTest  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void getDataQualityTestList(String datasourceOddrn, List<DataQualityTest> dataQualityTest) throws ApiException {
        getDataQualityTestListWithHttpInfo(datasourceOddrn, dataQualityTest);
    }

    /**
     * 
     * Provides list of available data quality tests
     * @param datasourceOddrn  (required)
     * @param dataQualityTest  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getDataQualityTestListWithHttpInfo(String datasourceOddrn, List<DataQualityTest> dataQualityTest) throws ApiException {
        okhttp3.Call localVarCall = getDataQualityTestListValidateBeforeCall(datasourceOddrn, dataQualityTest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Provides list of available data quality tests
     * @param datasourceOddrn  (required)
     * @param dataQualityTest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDataQualityTestListAsync(String datasourceOddrn, List<DataQualityTest> dataQualityTest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDataQualityTestListValidateBeforeCall(datasourceOddrn, dataQualityTest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDataQualityTestRunList
     * @param datasourceOddrn  (required)
     * @param dataQualityTestRun  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDataQualityTestRunListCall(String datasourceOddrn, List<DataQualityTestRun> dataQualityTestRun, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = dataQualityTestRun;

        // create path and map variables
        String localVarPath = "/ingesion/{datasourceOddrn}/qualitytests/runs"
            .replaceAll("\\{" + "datasourceOddrn" + "\\}", localVarApiClient.escapeString(datasourceOddrn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDataQualityTestRunListValidateBeforeCall(String datasourceOddrn, List<DataQualityTestRun> dataQualityTestRun, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'datasourceOddrn' is set
        if (datasourceOddrn == null) {
            throw new ApiException("Missing the required parameter 'datasourceOddrn' when calling getDataQualityTestRunList(Async)");
        }
        

        okhttp3.Call localVarCall = getDataQualityTestRunListCall(datasourceOddrn, dataQualityTestRun, _callback);
        return localVarCall;

    }

    /**
     * 
     * Provides list of available data quality tests runs
     * @param datasourceOddrn  (required)
     * @param dataQualityTestRun  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void getDataQualityTestRunList(String datasourceOddrn, List<DataQualityTestRun> dataQualityTestRun) throws ApiException {
        getDataQualityTestRunListWithHttpInfo(datasourceOddrn, dataQualityTestRun);
    }

    /**
     * 
     * Provides list of available data quality tests runs
     * @param datasourceOddrn  (required)
     * @param dataQualityTestRun  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getDataQualityTestRunListWithHttpInfo(String datasourceOddrn, List<DataQualityTestRun> dataQualityTestRun) throws ApiException {
        okhttp3.Call localVarCall = getDataQualityTestRunListValidateBeforeCall(datasourceOddrn, dataQualityTestRun, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Provides list of available data quality tests runs
     * @param datasourceOddrn  (required)
     * @param dataQualityTestRun  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDataQualityTestRunListAsync(String datasourceOddrn, List<DataQualityTestRun> dataQualityTestRun, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDataQualityTestRunListValidateBeforeCall(datasourceOddrn, dataQualityTestRun, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDataSetList
     * @param datasourceOddrn  (required)
     * @param dataSet  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDataSetListCall(String datasourceOddrn, List<DataSet> dataSet, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = dataSet;

        // create path and map variables
        String localVarPath = "/ingesion/{datasourceOddrn}/datasets"
            .replaceAll("\\{" + "datasourceOddrn" + "\\}", localVarApiClient.escapeString(datasourceOddrn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDataSetListValidateBeforeCall(String datasourceOddrn, List<DataSet> dataSet, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'datasourceOddrn' is set
        if (datasourceOddrn == null) {
            throw new ApiException("Missing the required parameter 'datasourceOddrn' when calling getDataSetList(Async)");
        }
        

        okhttp3.Call localVarCall = getDataSetListCall(datasourceOddrn, dataSet, _callback);
        return localVarCall;

    }

    /**
     * 
     * Provides list of available datasets
     * @param datasourceOddrn  (required)
     * @param dataSet  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void getDataSetList(String datasourceOddrn, List<DataSet> dataSet) throws ApiException {
        getDataSetListWithHttpInfo(datasourceOddrn, dataSet);
    }

    /**
     * 
     * Provides list of available datasets
     * @param datasourceOddrn  (required)
     * @param dataSet  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getDataSetListWithHttpInfo(String datasourceOddrn, List<DataSet> dataSet) throws ApiException {
        okhttp3.Call localVarCall = getDataSetListValidateBeforeCall(datasourceOddrn, dataSet, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Provides list of available datasets
     * @param datasourceOddrn  (required)
     * @param dataSet  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDataSetListAsync(String datasourceOddrn, List<DataSet> dataSet, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDataSetListValidateBeforeCall(datasourceOddrn, dataSet, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDataTransformerList
     * @param datasourceOddrn  (required)
     * @param dataTransformer  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDataTransformerListCall(String datasourceOddrn, List<DataTransformer> dataTransformer, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = dataTransformer;

        // create path and map variables
        String localVarPath = "/ingesion/{datasourceOddrn}/transformers"
            .replaceAll("\\{" + "datasourceOddrn" + "\\}", localVarApiClient.escapeString(datasourceOddrn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDataTransformerListValidateBeforeCall(String datasourceOddrn, List<DataTransformer> dataTransformer, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'datasourceOddrn' is set
        if (datasourceOddrn == null) {
            throw new ApiException("Missing the required parameter 'datasourceOddrn' when calling getDataTransformerList(Async)");
        }
        

        okhttp3.Call localVarCall = getDataTransformerListCall(datasourceOddrn, dataTransformer, _callback);
        return localVarCall;

    }

    /**
     * 
     * Provides list of available transformers
     * @param datasourceOddrn  (required)
     * @param dataTransformer  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void getDataTransformerList(String datasourceOddrn, List<DataTransformer> dataTransformer) throws ApiException {
        getDataTransformerListWithHttpInfo(datasourceOddrn, dataTransformer);
    }

    /**
     * 
     * Provides list of available transformers
     * @param datasourceOddrn  (required)
     * @param dataTransformer  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getDataTransformerListWithHttpInfo(String datasourceOddrn, List<DataTransformer> dataTransformer) throws ApiException {
        okhttp3.Call localVarCall = getDataTransformerListValidateBeforeCall(datasourceOddrn, dataTransformer, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Provides list of available transformers
     * @param datasourceOddrn  (required)
     * @param dataTransformer  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDataTransformerListAsync(String datasourceOddrn, List<DataTransformer> dataTransformer, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDataTransformerListValidateBeforeCall(datasourceOddrn, dataTransformer, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDataTransformerRunList
     * @param datasourceOddrn  (required)
     * @param dataTransformerRun  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDataTransformerRunListCall(String datasourceOddrn, List<DataTransformerRun> dataTransformerRun, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = dataTransformerRun;

        // create path and map variables
        String localVarPath = "/ingesion/{datasourceOddrn}/transformers/runs"
            .replaceAll("\\{" + "datasourceOddrn" + "\\}", localVarApiClient.escapeString(datasourceOddrn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDataTransformerRunListValidateBeforeCall(String datasourceOddrn, List<DataTransformerRun> dataTransformerRun, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'datasourceOddrn' is set
        if (datasourceOddrn == null) {
            throw new ApiException("Missing the required parameter 'datasourceOddrn' when calling getDataTransformerRunList(Async)");
        }
        

        okhttp3.Call localVarCall = getDataTransformerRunListCall(datasourceOddrn, dataTransformerRun, _callback);
        return localVarCall;

    }

    /**
     * 
     * Provides list of runs for all transformers
     * @param datasourceOddrn  (required)
     * @param dataTransformerRun  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void getDataTransformerRunList(String datasourceOddrn, List<DataTransformerRun> dataTransformerRun) throws ApiException {
        getDataTransformerRunListWithHttpInfo(datasourceOddrn, dataTransformerRun);
    }

    /**
     * 
     * Provides list of runs for all transformers
     * @param datasourceOddrn  (required)
     * @param dataTransformerRun  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getDataTransformerRunListWithHttpInfo(String datasourceOddrn, List<DataTransformerRun> dataTransformerRun) throws ApiException {
        okhttp3.Call localVarCall = getDataTransformerRunListValidateBeforeCall(datasourceOddrn, dataTransformerRun, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Provides list of runs for all transformers
     * @param datasourceOddrn  (required)
     * @param dataTransformerRun  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDataTransformerRunListAsync(String datasourceOddrn, List<DataTransformerRun> dataTransformerRun, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDataTransformerRunListValidateBeforeCall(datasourceOddrn, dataTransformerRun, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
